plugins {
    id 'java'
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id "com.modrinth.minotaur" version "2.+"
}

group = 'org.oryxel.gjr'
version = '1.2'

repositories {
    mavenCentral()
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        name = "opencollab-dev"
        url = "https://repo.opencollab.dev/main/"
    }
}

dependencies {
    compileOnly("org.geysermc.geyser:core:2.7.1-SNAPSHOT") {
        exclude group: "com.google.code.gson", module: "gson"
    }

    implementation("it.unimi.dsi:fastutil:8.5.15")
    implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.2")

    compileOnly("org.projectlombok:lombok:1.18.36")
    annotationProcessor("org.projectlombok:lombok:1.18.36")
}

shadowJar {
    relocate 'org.yaml.snakeyaml', 'org.oryxel.gfp.shaded.snakeyaml'
    relocate 'com.fasterxml', 'org.oryxel.gfp.shaded.fasterxml'
    relocate 'it.unimi.dsi.fastutil', 'org.oryxel.gfp.shaded.fastutil'
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    versionName = version + "-" + getCommitHash()
    versionNumber = version + "-" + getCommitHash()
    changelog = getCommitMessage()
    projectId = "geyserfloatingpoints"
    versionType = "release"
    uploadFile = shadowJar
    gameVersions = ["1.21.8"]
    loaders = ["bukkit", "paper", "spigot", "bungeecord", "velocity"]
}

def getCommitMessage() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'log', '-1', '--pretty=%B'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

// Thanks to https://gist.github.com/JonasGroeger/7620911 :tm:
def getCommitHash() {
    def gitFolder = "$projectDir/.git/"
    def takeFromHash = 7
    def head = new File(gitFolder + "HEAD").text.split(":")
    def isCommit = head.length == 1

    if(isCommit) return head[0].trim().take(takeFromHash)

    def refHead = new File(gitFolder + head[1].trim())
    refHead.text.trim().take takeFromHash
}
